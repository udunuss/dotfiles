#!/bin/bash

set -e
set -o pipefail

USERNAME="udunuss"
BRANCH="main"
REPO="dotfiles"
FROM_TO=(".config;$HOME")
GITHUB_TOKEN=${GITHUB_TOKEN:-""}
AUTH_HEADER=${GITHUB_TOKEN:+"Authorization: token $GITHUB_TOKEN"}
DEBUG=${DEBUG:-false}

debug() {
    if [ "$DEBUG" = true ]; then
        echo "DEBUG: $1" >&2
    fi
}

parse_json() {
    local json="$1"
    local query="$2"
    echo "$json" | jq -r "$query" 2>/dev/null || echo ""
}

download_item() {
    local path=$1
    local to=$2
    local api_url="https://api.github.com/repos/$USERNAME/$REPO/contents/$path?ref=$BRANCH"
    debug "Fetching: $api_url"
    local response=$(curl -sS -H "Accept: application/vnd.github.v3+json" -H "$AUTH_HEADER" "$api_url")
    debug "Response: $response"

    if parse_json "$response" '.message | select(. | contains("API rate limit exceeded"))' | grep -q .; then
        echo "Error: GitHub API rate limit exceeded. Set GITHUB_TOKEN env variable." >&2
        exit 1
    fi

    if parse_json "$response" 'if type == "array" then . else [.] end' | jq -c '.[]' | grep -q .; then
        echo "$response" | jq -c 'if type == "array" then .[] else . end' | while read -r item; do
            local item_path=$(parse_json "$item" '.path')
            local item_type=$(parse_json "$item" '.type')
            local download_url=$(parse_json "$item" '.download_url')
            local local_path="$to/$item_path"

            debug "Processing: $item_path ($item_type)"

            if [ "$item_type" = "dir" ]; then
                mkdir -p "$local_path"
                download_item "$item_path" "$to"
            elif [ "$item_type" = "file" ]; then
                if [ -f "$local_path" ]; then
                    local_date=$(stat -c %Y "$local_path")
                    commit_info=$(curl -sS -H "$AUTH_HEADER" "https://api.github.com/repos/$USERNAME/$REPO/commits?path=$item_path&page=1&per_page=1")
                    commit_date=$(parse_json "$commit_info" '.[0].commit.author.date')
                    
                    if [ -n "$commit_date" ] && [ $(date -d "$commit_date" +%s) -gt $(date -d "@$local_date" +%s) ]; then
                        echo "Updating $local_path"
                        curl -sS -o "$local_path" "$download_url"
                    else
                        debug "No update needed for $local_path"
                    fi
                else
                    echo "Downloading $local_path"
                    curl -sS -o "$local_path" "$download_url"
                fi
            fi
        done
    else
        echo "Error: Unexpected response format for $path" >&2
        debug "Full response: $response"
    fi
}

for f in "${FROM_TO[@]}"; do
    from=$(echo "$f" | cut -d ";" -f 1)
    to=$(echo "$f" | cut -d ";" -f 2)
    download_item "$from" "$to"
done
