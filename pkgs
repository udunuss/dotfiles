#!/bin/bash
set -euo pipefail

# Prompt for sudo password once at the beginning
sudo -v
# Start a background loop to keep updating sudo timestamp so it doesn't expire
( while true; do sleep 60; sudo -n true; done ) &
SUDO_LOOP_PID=$!
trap 'kill $SUDO_LOOP_PID' EXIT


# Variables
AUR_HELPER="paru"
RUST_INSTALLER_URL="https://sh.rustup.rs"
WEZTERM_TERMINFO="/usr/share/terminfo/w/wezterm"
KGX_BINARY="/usr/bin/kgx"
WEZTERM_BINARY="/usr/bin/wezterm"

# Function to install AUR helper
install_git() {
sudo pacman -S git --noconfirm --needed
git config --global http.postBuffer 157286400
}
install_aur_helper() {
    
    if ! command -v "$AUR_HELPER" &> /dev/null; then
        echo "$AUR_HELPER is not installed. Installing $AUR_HELPER..."
        git clone https://aur.archlinux.org/"$AUR_HELPER".git
        cd "$AUR_HELPER" || exit
        makepkg -si --noconfirm
        cd ..
        rm -rf "$AUR_HELPER"
    else
        echo "$AUR_HELPER is already installed."
    fi
}

# Function to clean up WezTerm terminfo if necessary
cleanup_wezterm_terminfo() {
    if ! command -v wezterm &>/dev/null; then
        if [ -d "$WEZTERM_TERMINFO" ]; then
            echo "WezTerm is not installed. Removing terminfo entry..."
            sudo rm -rf "$WEZTERM_TERMINFO"
        fi
    else
        echo "WezTerm is already installed."
    fi
}

# Function to update system packages
update_system() {
    echo "Updating system packages..."

    set +e
    "$AUR_HELPER" --sudoloop --noconfirm -Syu
    if [ $? -ne 0 ]; then
        echo "Warning: Some packages failed to install."
    fi
    set -e
}

# Function to install packages

install_packages() {
  echo "Installing packages..."

  # List all packages in one place
  local packages="
    figlet
    mpv
    jq
    btop
    xorg-xkill
    wl-clipboard
    bluez
    bluez-tools
    blueman
    keyd
    base-devel
    wget
    fzf
    bat
    dex
    fish
    zenity
    xorg-xhost
    dosfstools
    mtools
    udisks2
    udiskie
    neovim
    firefox
    google-chrome
    qbittorrent
    steam
    wezterm
    hyprland
    swww
    hyprlock
    xdg-desktop-portal-hyprland
    waybar
    polkit-gnome
    grim
    slurp
    brightnessctl
    networkmanager
    network-manager-applet
    godot
    flatpak
  "

  # Arrays to track installation status
  local installed_pkgs=()
  local failed_pkgs=()
  local already_pkgs=()

  # Temporarily disable exit-on-error
  set +e

  for pkg in $packages; do
    # Check if this package is already installed
    if pacman -Qi "$pkg" &>/dev/null; then
      already_pkgs+=("$pkg")
      continue
    fi

    # Not installed, so we try to install it
    "$AUR_HELPER" --sudoloop --needed --noconfirm -S "$pkg" \
      > /dev/null 2>&1 &

    local pid=$!

    # Simple spinner sequence
    local spin='-\|/'
    local i=0

    # Show a single "Installing <pkg>" line with a spinner
    while kill -0 "$pid" 2>/dev/null; do
      i=$(( (i + 1) % 4 ))
      printf "\r[%c] Installing %s..." "${spin:$i:1}" "$pkg"
      sleep 0.1
    done

    # Wait for the command to finish, then capture its exit code
    wait "$pid"
    local exit_code=$?

    # Clear the spinner line
    printf "\r\033[K"

    if [ "$exit_code" -ne 0 ]; then
      failed_pkgs+=("$pkg")
    else
      installed_pkgs+=("$pkg")
    fi
  done

  # Re-enable exit-on-error
  set -e

  # Final summary:
  echo "----------------------------------------"
  echo "Installation Summary"
  echo "----------------------------------------"

  if [ "${#installed_pkgs[@]}" -gt 0 ]; then
    echo -n "Installed Packages: "
    printf '\e[2m%s\e[0m ' "${installed_pkgs[@]}"
    echo
  fi

  if [ "${#failed_pkgs[@]}" -gt 0 ]; then
    echo -n "Failed Packages: "
    printf '\e[2m%s\e[0m ' "${failed_pkgs[@]}"
    echo
  fi

  if [ "${#already_pkgs[@]}" -gt 0 ]; then
    echo -n "Already Installed: "
    printf '\e[2m%s\e[0m ' "${already_pkgs[@]}"
    echo
  fi
}
flathub_install() {
  # Capture the package name passed as an argument
  local package_name="$1"

  # First, check if the package is already installed
  if flatpak info "$package_name" &>/dev/null; then
    echo "$package_name is already installed!"
    return 0
  fi

  echo "Installing $package_name..."

  # Run flatpak install in the background, suppressing output
  flatpak install flathub "$package_name" -y > /dev/null 2>&1 &
  local pid=$!

  # Define a simple spinner sequence
  local spin='-\|/'
  local i=0

  # Loop while the flatpak install process is running
  while kill -0 "$pid" 2>/dev/null; do
    # Print spinner animation in place
    i=$(( (i + 1) % 4 ))
    printf "\r[%c] Installing $package_name..." "${spin:$i:1}"
    sleep 0.1
  done

  # Clear the spinner and print completion message
  printf "\rDone installing $package_name!\n"
}

install_flatpak_packages(){
flathub_install "com.usebottles.bottles"
flathub_install "com.github.tchx84.Flatseal"
}

# Function to configure services
configure_services() {
    echo "Configuring services..."
    sudo usermod -aG keyd "$(whoami)"
    sudo systemctl enable --now keyd.service bluetooth.service
}

# Function to install Rust
install_rust() {
    if command -v rustc &>/dev/null && command -v cargo &>/dev/null; then
        echo "Rust is already installed."
    else
        echo "Installing Rust..."
        curl --proto '=https' --tlsv1.2 -sSf "$RUST_INSTALLER_URL" | sh -s -- -y
        source "$HOME/.cargo/env"
        echo 'source "$HOME/.cargo/env"' >> "$HOME/.bashrc"
        echo 'source "$HOME/.cargo/env.fish"' >> "$HOME/.config/fish/config.fish"
    fi
}

# Function to install fonts
install_fonts() {
  echo "Installing fonts..."

  # List all font packages in a variable for clarity
  local fonts="
    noto-fonts-cjk
    noto-fonts-emoji
    noto-fonts
    ttf-freefont
    ttf-ms-fonts
    ttf-linux-libertine
    ttf-dejavu
    ttf-inconsolata
    ttf-ubuntu-font-family
    nerd-fonts
    ttf-font-awesome-5
    ttf-jetbrains-mono
  "

  # Disable exit on error temporarily so we can capture status ourselves
  set +e

  # Run the install command in the background, suppress all output
  "$AUR_HELPER" --sudoloop --needed --noconfirm -S $fonts > /dev/null 2>&1 &
  local pid=$!

  # Define a simple spinner sequence
  local spin='-\|/'
  local i=0

  # Loop until the background process completes
  while kill -0 "$pid" 2>/dev/null; do
    i=$(( (i + 1) % 4 ))
    printf "\r[%c] Installing fonts..." "${spin:$i:1}"
    sleep 0.1
  done

  # Now that the process is done, wait on it and store its exit code
  wait "$pid"
  local exit_code=$?

  if [ "$exit_code" -ne 0 ]; then
    # Clear spinner and show a warning
    printf "\rWarning: Some fonts failed to install.\n"
  else
    # Clear spinner and show success
    printf "\rDone installing fonts!\n"
  fi

  # Re-enable exit-on-error if desired
  set -e
}


# Function to configure WezTerm as default terminal
configure_wezterm() {
    echo "Configuring WezTerm as the default terminal for KGX..."
    if [ -f "$KGX_BINARY" ]; then
        sudo rm -f "$KGX_BINARY"
    fi
    sudo ln -sf "$WEZTERM_BINARY" "$KGX_BINARY"
}

# Function to configure Nautilus to open WezTerm
configure_nautilus() {
    echo "Configuring Nautilus to open WezTerm..."
    "$AUR_HELPER" --sudoloop --noconfirm --needed -S nautilus-open-any-terminal
    gsettings set com.github.stunkymonkey.nautilus-open-any-terminal terminal wezterm
}

# Function to set default file manager
set_default_file_manager() {
    echo "Setting Nautilus as the default file manager..."
    xdg-mime default org.gnome.Nautilus.desktop inode/directory
}

# Function to enable Wayland in GDM
enable_wayland_gdm() {
    echo "Enabling Wayland in GDM..."
    sudo sed -i 's/#WaylandEnable=false/WaylandEnable=true/g' /etc/gdm/custom.conf
}

# Function to enable Nvidia services
enable_nvidia_services() {
    echo "Enabling Nvidia services..."
    sudo systemctl enable nvidia-suspend.service nvidia-hibernate.service nvidia-resume.service
    echo "Note: Add 'nvidia_drm.modeset=1 nvidia_drm.fbdev=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1' to your kernel parameters if GDM does not show Wayland options."
}
# Lorien is a infinite canvas application.

download_and_setup_lorien() {
    # Variables
    REPO="mbrlabs/Lorien"
    INSTALL_DIR="$HOME/.local/share/Lorien"
    DESKTOP_FILE="$HOME/.local/share/applications/lorien.desktop"
    UNINSTALLER="$HOME/.local/share/applications/lorien-uninstaller.desktop"
    EXECUTABLE="$INSTALL_DIR/Lorien.x86_64"

    # Check if Lorien already exists
    if [ -f "$EXECUTABLE" ]; then
        echo "Lorien is already installed at $INSTALL_DIR."
        return 0
    fi

    # Fetch latest release download URL
    LATEST_RELEASE_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | jq -r '.assets[] | select(.name | endswith("Linux.tar.xz")) | .browser_download_url')

    # Create install directory, download, and extract
    mkdir -p "$INSTALL_DIR"
    wget -O "$INSTALL_DIR/Lorien_Linux.tar.xz" "$LATEST_RELEASE_URL"
    tar -xf "$INSTALL_DIR/Lorien_Linux.tar.xz" -C "$INSTALL_DIR" --strip-components=1

    # Make the executable runnable
    chmod +x "$EXECUTABLE"

    # Create .desktop file
    cat > "$DESKTOP_FILE" <<EOL
[Desktop Entry]
Name=Lorien
Exec=$EXECUTABLE
Icon=$INSTALL_DIR/icon.png
Type=Application
Categories=Drawing;Canvas;Graphics;
EOL
cat > "$UNINSTALLER" <<EOL
[Desktop Entry]
Name=Lorien Uninstaller
Comment=Uninstall Lorien Application
Exec=sh -c 'if zenity --question --title="Uninstall Lorien" --text="Are you sure you want to uninstall Lorien?"; then rm -rf "$INSTALL_DIR" "$DESKTOP_FILE" "$UNINSTALLER" && notify-send "Lorien has been uninstalled."; fi'
Icon=application-x-executable
Terminal=false
Type=Application
Categories=Utility;

EOL
    echo "Lorien has been installed and a desktop entry has been created."
}

#Disable gpu compositing for chrome
chrome_dgc() {
sudo /bin/bash -c "cat > /usr/share/applications/google-chrome.desktop << ENDOFLINE
[Desktop Entry]
Version=1.0
Name=Google Chrome
# Only KDE 4 seems to use GenericName, so we reuse the KDE strings.
# From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.
GenericName=Web Browser
GenericName[tr]=Web Tarayıcı
# Gnome and KDE 3 uses Comment.
Comment=Access the Internet
Comment[tr]=İnternet'e erişin
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing %U
StartupNotify=true
Terminal=false
Icon=google-chrome
Type=Application
Categories=Network;WebBrowser;
MimeType=application/pdf;application/rdf+xml;application/rss+xml;application/xhtml+xml;application/xhtml_xml;application/xml;image/gif;image/jpeg;image/png;image/webp;text/html;text/xml;x-scheme-handler/http;x-scheme-handler/https;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Name[tr]=Yeni Pencere
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing

[Desktop Action new-private-window]
Name=New Incognito Window
Name[tr]=Yeni Gizli pencere
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing --incognito
ENDOFLINE"
}

# Main script execution
main() {
    install_git
    install_aur_helper
    cleanup_wezterm_terminfo
    update_system
    install_packages
    install_flatpak_packages
    configure_services
    install_rust
    install_fonts
    configure_wezterm
    configure_nautilus
    set_default_file_manager
    enable_wayland_gdm
    enable_nvidia_services
    download_and_setup_lorien
    #chrome_dgc
    echo "Script execution complete."
}

main "$@"
