#!/bin/bash
# nvidia_drm.modeset=1 nvidia_drm.fbdev=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1 ibt=off
set -euo pipefail

# Variables
AUR_HELPER="paru"
RUST_INSTALLER_URL="https://sh.rustup.rs"
WEZTERM_TERMINFO="/usr/share/terminfo/w/wezterm"
KGX_BINARY="/usr/bin/kgx"
WEZTERM_BINARY="/usr/bin/wezterm"

# Function to install AUR helper
install_aur_helper() {
    if ! command -v "$AUR_HELPER" &> /dev/null; then
        echo "$AUR_HELPER is not installed. Installing $AUR_HELPER..."
        git clone https://aur.archlinux.org/"$AUR_HELPER".git
        cd "$AUR_HELPER" || exit
        makepkg -si --noconfirm
        cd ..
        rm -rf "$AUR_HELPER"
    else
        echo "$AUR_HELPER is already installed."
    fi
}

# Function to clean up WezTerm terminfo if necessary
cleanup_wezterm_terminfo() {
    if ! command -v wezterm &>/dev/null; then
        if [ -d "$WEZTERM_TERMINFO" ]; then
            echo "WezTerm is not installed. Removing terminfo entry..."
            sudo rm -rf "$WEZTERM_TERMINFO"
        fi
    else
        echo "WezTerm is already installed."
    fi
}

# Function to update system packages
update_system() {
    echo "Updating system packages..."
    sudo pacman --noconfirm -Syu
    "$AUR_HELPER" --sudoloop --noconfirm -Syu
}

# Function to install packages
install_packages() {
    echo "Installing packages..."
    "$AUR_HELPER" --sudoloop --needed --noconfirm -S \
        figlet mpv jq btop xorg-xkill wl-clipboard bluez bluez-tools blueman keyd git base-devel wget fzf bat dex fish zenity xorg-xhost \
        dosfstools mtools \
        udisks2 udiskie \
        neovim firefox google-chrome qbittorrent steam wezterm-git \
        hyprland swww hyprlock xdg-desktop-portal-hyprland waybar polkit-gnome grim slurp brightnessctl \
        networkmanager network-manager-applet godot
}

# Function to configure services
configure_services() {
    echo "Configuring services..."
    sudo usermod -aG keyd "$(whoami)"
    sudo systemctl enable --now keyd.service bluetooth.service
}

# Function to install Rust
install_rust() {
    if command -v rustc &>/dev/null && command -v cargo &>/dev/null; then
        echo "Rust is already installed."
    else
        echo "Installing Rust..."
        curl --proto '=https' --tlsv1.2 -sSf "$RUST_INSTALLER_URL" | sh -s -- -y
        source "$HOME/.cargo/env"
        echo 'source "$HOME/.cargo/env"' >> "$HOME/.bashrc"
        echo 'source "$HOME/.cargo/env.fish"' >> "$HOME/.config/fish/config.fish"
    fi
}

# Function to install fonts
install_fonts() {
    echo "Installing fonts..."
    "$AUR_HELPER" --sudoloop --needed --noconfirm -S \
        noto-fonts-cjk noto-fonts-emoji noto-fonts ttf-freefont ttf-ms-fonts ttf-linux-libertine ttf-dejavu \
        ttf-inconsolata ttf-ubuntu-font-family nerd-fonts ttf-font-awesome-5 ttf-jetbrains-mono
}

# Function to configure WezTerm as default terminal
configure_wezterm() {
    echo "Configuring WezTerm as the default terminal for KGX..."
    if [ -f "$KGX_BINARY" ]; then
        sudo rm -f "$KGX_BINARY"
    fi
    sudo ln -sf "$WEZTERM_BINARY" "$KGX_BINARY"
}

# Function to configure Nautilus to open WezTerm
configure_nautilus() {
    echo "Configuring Nautilus to open WezTerm..."
    "$AUR_HELPER" --sudoloop --noconfirm --needed -S nautilus-open-any-terminal
    gsettings set com.github.stunkymonkey.nautilus-open-any-terminal terminal wezterm
}

# Function to set default file manager
set_default_file_manager() {
    echo "Setting Nautilus as the default file manager..."
    xdg-mime default org.gnome.Nautilus.desktop inode/directory
}

# Function to enable Wayland in GDM
enable_wayland_gdm() {
    echo "Enabling Wayland in GDM..."
    sudo sed -i 's/#WaylandEnable=false/WaylandEnable=true/g' /etc/gdm/custom.conf
}

# Function to enable Nvidia services
enable_nvidia_services() {
    echo "Enabling Nvidia services..."
    sudo systemctl enable nvidia-suspend.service nvidia-hibernate.service nvidia-resume.service
    echo "Note: Add 'nvidia_drm.modeset=1 nvidia.NVreg_PreserveVideoMemoryAllocations=1' to your kernel parameters if GDM does not show Wayland options."
}
# Lorien is a infinite canvas application.

download_and_setup_lorien() {
    # Variables
    REPO="mbrlabs/Lorien"
    INSTALL_DIR="$HOME/.local/share/Lorien"
    DESKTOP_FILE="$HOME/.local/share/applications/lorien.desktop"
    UNINSTALLER="$HOME/.local/share/applications/lorien-uninstaller.desktop"
    EXECUTABLE="$INSTALL_DIR/Lorien.x86_64"

    # Check if Lorien already exists
    if [ -f "$EXECUTABLE" ]; then
        echo "Lorien is already installed at $INSTALL_DIR."
        return 0
    fi

    # Fetch latest release download URL
    LATEST_RELEASE_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | jq -r '.assets[] | select(.name | endswith("Linux.tar.xz")) | .browser_download_url')

    # Create install directory, download, and extract
    mkdir -p "$INSTALL_DIR"
    wget -O "$INSTALL_DIR/Lorien_Linux.tar.xz" "$LATEST_RELEASE_URL"
    tar -xf "$INSTALL_DIR/Lorien_Linux.tar.xz" -C "$INSTALL_DIR" --strip-components=1

    # Make the executable runnable
    chmod +x "$EXECUTABLE"

    # Create .desktop file
    cat > "$DESKTOP_FILE" <<EOL
[Desktop Entry]
Name=Lorien
Exec=$EXECUTABLE
Icon=$INSTALL_DIR/icon.png
Type=Application
Categories=Drawing;Canvas;Graphics;
EOL
cat > "$UNINSTALLER" <<EOL
[Desktop Entry]
Name=Lorien Uninstaller
Comment=Uninstall Lorien Application
Exec=sh -c 'if zenity --question --title="Uninstall Lorien" --text="Are you sure you want to uninstall Lorien?"; then rm -rf "$INSTALL_DIR" "$DESKTOP_FILE" "$UNINSTALLER" && notify-send "Lorien has been uninstalled."; fi'
Icon=application-x-executable
Terminal=false
Type=Application
Categories=Utility;

EOL
    echo "Lorien has been installed and a desktop entry has been created."
}

#Disable gpu compositing for chrome
chrome_dgc() {
sudo /bin/bash -c "cat > /usr/share/applications/google-chrome.desktop << ENDOFLINE
[Desktop Entry]
Version=1.0
Name=Google Chrome
# Only KDE 4 seems to use GenericName, so we reuse the KDE strings.
# From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.
GenericName=Web Browser
GenericName[tr]=Web Tarayıcı
# Gnome and KDE 3 uses Comment.
Comment=Access the Internet
Comment[tr]=İnternet'e erişin
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing %U
StartupNotify=true
Terminal=false
Icon=google-chrome
Type=Application
Categories=Network;WebBrowser;
MimeType=application/pdf;application/rdf+xml;application/rss+xml;application/xhtml+xml;application/xhtml_xml;application/xml;image/gif;image/jpeg;image/png;image/webp;text/html;text/xml;x-scheme-handler/http;x-scheme-handler/https;
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=New Window
Name[tr]=Yeni Pencere
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing

[Desktop Action new-private-window]
Name=New Incognito Window
Name[tr]=Yeni Gizli pencere
StartupWMClass=Google-chrome
Exec=/usr/bin/google-chrome-stable --disable-gpu-compositing --incognito
ENDOFLINE"
}

# Main script execution
main() {
    install_aur_helper
    cleanup_wezterm_terminfo
    update_system
    install_packages
    configure_services
    install_rust
    install_fonts
    configure_wezterm
    configure_nautilus
    set_default_file_manager
    enable_wayland_gdm
    enable_nvidia_services
    download_and_setup_lorien
    chrome_dgc
    echo "Script execution complete."
}

main "$@"
