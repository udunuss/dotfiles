#!/bin/bash
set -e
set -o pipefail

username="udunuss"
branch="main"
repo="dotfiles"
from_to=(".config;$HOME" "usr;" "etc;")

# GitHub Personal Access Token (PAT)
# Create a PAT at https://github.com/settings/tokens and set it as an environment variable:
# export GITHUB_PAT=your_token_here
GITHUB_PAT=${GITHUB_PAT:-}

# Debug flag (set to true to enable debug output)
DEBUG=${DEBUG:-false}

# Temporary directory for cloning the repository
TEMP_DIR=$(mktemp -d)

debug_output() {
    if [ "$DEBUG" = true ]; then
        echo "DEBUG: $1" >&2
    fi
}

clone_repository() {
    local clone_url="https://github.com/$username/$repo.git"
    if [ -n "$GITHUB_PAT" ]; then
        clone_url="https://$GITHUB_PAT@github.com/$username/$repo.git"
    fi
    git clone --depth 1 --branch "$branch" "$clone_url" "$TEMP_DIR"
}

update_dotfiles() {
    for mapping in "${from_to[@]}"; do
        local from=$(echo "$mapping" | cut -d ";" -f 1)
        local to=$(echo "$mapping" | cut -d ";" -f 2)
        to="$to/$from"
        if [ ! -d "$TEMP_DIR/$from" ]; then
            echo "Error: Source directory $from not found in the repository" >&2
            continue
        fi
        find "$TEMP_DIR/$from" -type f | while read -r src_file; do

            local rel_path="${src_file#$TEMP_DIR/$from/}"
            local dest_file="$to/$rel_path"
            local dest_dir=$(dirname "$dest_file")
            if [ ! -d "$dest_dir" ]; then
                if ! mkdir -p "$dest_dir" 2>/dev/null; then
                    echo "Sudo required to create directory: $dest_dir"
                    sudo mkdir -p "$dest_dir"
                fi
            fi
            if [ ! -f "$dest_file" ] || ! cmp -s "$src_file" "$dest_file"; then
                if ! cp "$src_file" "$dest_file" 2>/dev/null; then
                    echo "Sudo required to update file: $dest_file"
                    sudo cp "$src_file" "$dest_file"
                if [[ $dest_file == *.sh ]]; then
                    sudo chmod +x "$dest_file"
                    echo "Executable permission granted for the ${dest_file}"
                fi
                fi
                echo "Updated: $dest_file"
            else
                echo "No update needed for $dest_file"
            fi
        done
    done
}

cleanup() {
    debug_output "Cleaning up temporary directory: $TEMP_DIR"
    rm -rf "$TEMP_DIR"
}

echo "Starting dotfiles update script..."
if [ -n "$GITHUB_PAT" ]; then
    echo "Using GitHub Personal Access Token for authentication."
else
    echo "No GitHub Personal Access Token provided. Cloning may be subject to stricter rate limiting."
fi

if [ "$DEBUG" = true ]; then
    echo "Debug mode is enabled."
else
    echo "Debug mode is disabled. Set DEBUG=true to enable debug output."
fi

trap cleanup EXIT

clone_repository

update_dotfiles
echo "Dotfiles update complete."
